
#include <thread>
#include <mutex>
#include <condition_variable>
#include <iostream>
#include <chrono>
#include <vector>

constexpr int NUM_PHILOSOPHERS = 5;

std::mutex forks_mutex;
std::condition_variable forks_cv;
std::vector<bool> forks_taken(NUM_PHILOSOPHERS, false);

void philosopher(int id) {
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    while (true) {
        // Философ размышляет
        std::cout << "Philosopher " << id << " is thinking" << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Время размышлений

        std::unique_lock<std::mutex> lock(forks_mutex);

        // Ждем, пока обе вилки не будут свободны
        forks_cv.wait(lock, [left, right]() {
            return !forks_taken[left] && !forks_taken[right];
            });

        // Захватываем вилки
        forks_taken[left] = true;
        forks_taken[right] = true;

        lock.unlock();

        // Философ ест
        std::cout << "Philosopher " << id << " is eating" << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(1000)); // Время еды

        lock.lock();

        // Освобождаем вилки
        forks_taken[left] = false;
        forks_taken[right] = false;

        // Уведомляем других философов о том, что вилки освободились
        forks_cv.notify_all();

        lock.unlock();
    }
}

int main() {
    std::vector<std::thread> philosophers;

    // Создаем потоки для каждого философа
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        philosophers.emplace_back(philosopher, i);
    }

    // Ждем завершения всех потоков
    for (auto& philosopher : philosophers) {
        philosopher.join();
    }

    return 0;
}

